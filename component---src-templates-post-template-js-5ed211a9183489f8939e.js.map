{"version":3,"sources":["webpack:///./src/templates/postTemplate.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","react_redux__WEBPACK_IMPORTED_MODULE_2__","_actions_layout__WEBPACK_IMPORTED_MODULE_3__","_store_selectors__WEBPACK_IMPORTED_MODULE_5__","mapDispatchToProps","onSidebarContentExpand","connect","state","expandedKey","getSidebarExpandedKey","_ref","data","markdownRemark","frontmatter","html","id","a","createElement","sidebarRoot","root","onPostPage","slug","fields","className","dangerouslySetInnerHTML","__html"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,KAAAW,GAAAX,EAAA,KAAAA,EAAA,MAmCA,IAMMY,EAAqB,CACzBC,4BAGaC,sBAVS,SAACC,GACvB,MAAO,CACLC,YAAcC,YAAsBF,KAQAH,EAAzBE,CArCf,SAAAI,GAIG,IAHDC,EAGCD,EAHDC,KACAN,EAECK,EAFDL,uBACAG,EACCE,EADDF,YAEQI,EAAmBD,EAAnBC,eACAC,EAA0BD,EAA1BC,YAAaC,EAAaF,EAAbE,KAAMC,EAAOH,EAAPG,GAK3B,OAJIP,IAAgBO,GAClBV,EAAuBU,GAIvBjB,EAAAkB,EAAAC,cAACjB,EAAA,EAAD,CAAQkB,YAAaL,EAAYM,KAAMC,YAAY,EAAMC,KAAMT,EAAeU,OAAOD,MACrFvB,EAAAkB,EAAAC,cAAA,OAAKM,UAAU,uBACbzB,EAAAkB,EAAAC,cAAA,OAAKM,UAAU,aAGbzB,EAAAkB,EAAAC,cAAA,OACEM,UAAU,oBACVC,wBAAyB,CAAEC,OAAQX,UAoBtC,IAAMlB,EAAS","file":"component---src-templates-post-template-js-5ed211a9183489f8939e.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\";\nimport { connect } from 'react-redux'\nimport { onSidebarContentExpand } from '../actions/layout'\nimport \"katex/dist/katex.min.css\"\nimport { getSidebarExpandedKey } from \"../store/selectors\";\n\nfunction Template({\n  data, // this prop will be injected by the GraphQL query below.\n  onSidebarContentExpand,\n  expandedKey,\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { frontmatter, html, id } = markdownRemark\n  if (expandedKey !== id) {\n    onSidebarContentExpand(id)\n  }\n\n  return (\n    <Layout sidebarRoot={frontmatter.root} onPostPage={true} slug={markdownRemark.fields.slug} >\n    <div className=\"blog-post-container\">\n      <div className=\"blog-post\">\n        {/* <h1>{frontmatter.title}</h1>\n        <h5>{frontmatter.date}</h5> */}\n        <div\n          className=\"blog-post-content\"\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      </div>\n    </div>\n    </Layout>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    expandedKey : getSidebarExpandedKey(state)\n  }\n}\n\nconst mapDispatchToProps = {\n  onSidebarContentExpand,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Template)\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(fields: { slug: { eq: $path} }) {\n      fields {\n        slug\n      }\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        root\n      }\n    }\n  }\n`"],"sourceRoot":""}